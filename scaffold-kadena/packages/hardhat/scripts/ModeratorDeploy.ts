import { ethers, run } from "hardhat";
import hre from "hardhat";
import fs from "fs";
import path from "path";

async function main() {
  console.log("🚀 Deploying Moderator contract to Chainweb testnet chain 22...");

  const verificationDelay =
    process.env.VERIFICATION_DELAY ? parseInt(process.env.VERIFICATION_DELAY) : 10000;

  // Deployer
  const [deployer] = await ethers.getSigners();
  console.log(`\n👤 Deployer: ${deployer.address}`);
  console.log(
    `💰 Balance: ${ethers.formatEther(await ethers.provider.getBalance(deployer.address))} KDA`
  );

  // Deploy Moderator
  console.log("\n📦 Deploying Moderator...");
  const Moderator = await ethers.getContractFactory("Moderator");
  const moderator = await Moderator.deploy();
  await moderator.waitForDeployment();
  const moderatorAddress = await moderator.getAddress();
  console.log(`✅ Moderator deployed at: ${moderatorAddress}`);

  // Save deployedContracts.ts
  await generateDeployedContractsFile(moderatorAddress);

  // Wait before verification
  console.log(`\n⏳ Waiting ${verificationDelay / 1000} seconds before verification...`);
  await new Promise((resolve) => setTimeout(resolve, verificationDelay));

  // Verify Moderator
  try {
    console.log("\n🔍 Verifying Moderator...");
    await run("verify:verify", {
      address: moderatorAddress,
      constructorArguments: [],
    });
    console.log("✅ Moderator verified");
  } catch (err: any) {
    console.log("❌ Moderator verification failed:", err.message);
  }

  console.log("\n🎉 Deployment finished!");
  console.log(`   Moderator: ${moderatorAddress}`);
  console.log(`   Explorer:  https://chain-22.evm-testnet-blockscout.chainweb.com/`);
}

async function generateDeployedContractsFile(moderatorAddress: string) {
  const moderatorArtifact = await hre.artifacts.readArtifact("Moderator");

  // Chain 22 = chainId 5922
  const deployedContracts = {
    5922: {
      Moderator: {
        address: moderatorAddress,
        abi: moderatorArtifact.abi,
      },
    },
  };

  const contractsDir = path.join(__dirname, "../../nextjs/contracts");
  const filePath = path.join(contractsDir, "deployedContracts.ts");

  const fileContent = `/**
 * Auto-generated by deployment script.
 * Do not edit manually.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = ${JSON.stringify(deployedContracts, null, 2)} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
`;

  if (!fs.existsSync(contractsDir)) {
    fs.mkdirSync(contractsDir, { recursive: true });
  }

  fs.writeFileSync(filePath, fileContent);
  console.log("✅ Wrote deployedContracts.ts for Chain 22");
}

main().catch((err) => {
  console.error(err);
  process.exitCode = 1;
});
