import { chainweb, ethers, run } from "hardhat";
import hre from "hardhat";
import fs from "fs";
import path from "path";

async function main() {
  console.log("Deploying NFT Marketplace to Chain 22...");

  const verificationDelay = process.env.VERIFICATION_DELAY ? parseInt(process.env.VERIFICATION_DELAY) : 10000;

  // Switch to chain 22 specifically  
  await chainweb.switchChain(22);
  
  const [deployer] = await ethers.getSigners();
  console.log(`Deploying with account: ${deployer.address}`);
  console.log(`Account balance: ${ethers.formatEther(await ethers.provider.getBalance(deployer.address))} KDA`);

  // Deploy StreamNFT first
  console.log("Deploying StreamNFT...");
  const StreamNFT = await ethers.getContractFactory("StreamNFT"); //0x610178dA211FEF7D417bC0e6FeD39F05609AD788
  const streamNFT = await StreamNFT.deploy();
  await streamNFT.waitForDeployment();
  
  const streamNFTAddress = await streamNFT.getAddress();
  console.log(`âœ… StreamNFT deployed to: ${streamNFTAddress}`);

  // Deploy Marketplace
  console.log("Deploying Marketplace...");
  const Marketplace = await ethers.getContractFactory("Marketplace"); //0xB7f8BC63BbcaD18155201308C8f3540b07f84F5e
  const marketplace = await Marketplace.deploy(streamNFTAddress);
  await marketplace.waitForDeployment();
  
  const marketplaceAddress = await marketplace.getAddress();
  console.log(`âœ… Marketplace deployed to: ${marketplaceAddress}`);

  // Generate deployedContracts.ts file
  await generateDeployedContractsFileForChain22(streamNFTAddress, marketplaceAddress);

  // Wait before verification
  console.log(`Waiting ${verificationDelay / 1000} seconds before verification...`);
  await new Promise(resolve => setTimeout(resolve, verificationDelay));

  // Verify contracts
  try {
    console.log("Verifying StreamNFT...");
    await run("verify:verify", {
      address: streamNFTAddress,
      constructorArguments: [],
    });
    console.log("âœ… StreamNFT verified");
  } catch (error: any) {
    console.log("StreamNFT verification failed:", error.message);
  }

  try {
    console.log("Verifying Marketplace...");
    await run("verify:verify", {
      address: marketplaceAddress,
      constructorArguments: [streamNFTAddress],
    });
    console.log("âœ… Marketplace verified");
  } catch (error: any) {
    console.log("Marketplace verification failed:", error.message);
  }

  console.log("\nðŸŽ‰ Deployment completed!");
  console.log(`StreamNFT: ${streamNFTAddress}`);
  console.log(`Marketplace: ${marketplaceAddress}`);
  console.log(`Chain: 22`);
  console.log(`Explorer: https://chain-22.evm-testnet-blockscout.chainweb.com/`);
}

async function generateDeployedContractsFileForChain22(streamNFTAddress: string, marketplaceAddress: string) {
  // Get ABIs
  const streamNFTArtifact = await hre.artifacts.readArtifact("StreamNFT");
  const marketplaceArtifact = await hre.artifacts.readArtifact("Marketplace");

  // Chain 22 has chainId 5922
  const deployedContracts = {
    5922: {
      StreamNFT: {
        address: streamNFTAddress,
        abi: streamNFTArtifact.abi,
      },
      Marketplace: {
        address: marketplaceAddress,
        abi: marketplaceArtifact.abi,
      },
    },
  };

  const contractsDir = path.join(__dirname, "../../nextjs/contracts");
  const filePath = path.join(contractsDir, "deployedContracts.ts");

  const fileContent = `/**
 * This file is autogenerated by Scaffold-Kadena.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = ${JSON.stringify(deployedContracts, null, 2)} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
`;

  // Ensure the contracts directory exists
  if (!fs.existsSync(contractsDir)) {
    fs.mkdirSync(contractsDir, { recursive: true });
  }

  fs.writeFileSync(filePath, fileContent);
  console.log("âœ… Generated deployedContracts.ts for Chain 22");
}

main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});