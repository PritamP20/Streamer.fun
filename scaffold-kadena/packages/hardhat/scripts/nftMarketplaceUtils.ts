import hre from "hardhat";
import type { DeployedContractsOnChains } from "hardhat-kadena/src/utils";
import fs from "fs";
import path from "path";

/**
 * Generate deployedContracts.ts file for NFT Marketplace frontend
 */
export async function generateNFTMarketplaceDeployedContractsFile(
  nftDeployments: any[], 
  marketplaceDeployments: any[]
) {
  const deployedContracts: Record<string, any> = {};

  // Get the ABIs from compilation artifacts
  const streamNFTArtifact = await hre.artifacts.readArtifact("StreamNFT");
  const marketplaceArtifact = await hre.artifacts.readArtifact("Marketplace");

  // Create maps for easy lookup
  const nftDeploymentsByChain: Record<number, any> = {};
  const marketplaceDeploymentsByChain: Record<number, any> = {};

  for (const deployment of nftDeployments) {
    nftDeploymentsByChain[deployment.chain] = deployment;
  }

  for (const deployment of marketplaceDeployments) {
    marketplaceDeploymentsByChain[deployment.chain] = deployment;
  }

  // Process deployments using runOverChains for consistency
  await hre.chainweb.runOverChains(async (chainId: number) => {
    console.log(`Generating deployed contract data for chain ${chainId}`);

    // Skip chains that weren't in our successful deployments
    if (!nftDeploymentsByChain[chainId] || !marketplaceDeploymentsByChain[chainId]) {
      console.log(`Missing deployment for chain ${chainId}, skipping`);
      return;
    }

    const nftDeployment = nftDeploymentsByChain[chainId];
    const marketplaceDeployment = marketplaceDeploymentsByChain[chainId];

    deployedContracts[hre.network.config.chainId] = {
      StreamNFT: {
        address: nftDeployment.address,
        abi: streamNFTArtifact.abi,
      },
      Marketplace: {
        address: marketplaceDeployment.address,
        abi: marketplaceArtifact.abi,
      },
    };
  });

  const contractsDir = path.join(__dirname, "../../nextjs/contracts");
  const filePath = path.join(contractsDir, "deployedContracts.ts");

  const fileContent = `/**
 * This file is autogenerated by Scaffold-Kadena.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = ${JSON.stringify(deployedContracts, null, 2)} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
`;

  // Ensure the contracts directory exists
  if (!fs.existsSync(contractsDir)) {
    fs.mkdirSync(contractsDir, { recursive: true });
  }

  fs.writeFileSync(filePath, fileContent);
  console.log("âœ… Generated deployedContracts.ts with StreamNFT and Marketplace");
}